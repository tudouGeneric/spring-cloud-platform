server:
  port: 8090    #启动端口

##数据源配置
spring:
  #mysql数据库配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://139.196.137.238:3306/spring_cloud_platform?useUnicode=true&characterEncoding=utf-8&useSSL=false&useAffectedRows=true&serverTimezone=Asia/Shanghai
    username: root
    password: root
    druid:
      # 连接池配置
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 连接等待超时时间
      max-wait: 30000
      # 配置检测可以关闭的空闲连接间隔时间
      time-between-eviction-runs-millis: 60000
      # 配置连接在池中的最小生存时间
      min-evictable-idle-time-millis: 300000
      validation-query: select 'x'
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
  #Redis数据库配置
  redis:
    #Redis数据库索引,默认为0
    database: 0
    #Redis服务地址
    host: 139.196.137.238
    #Redis服务连接端口
    port: 6379
    #Redis服务密码
    password: nytd13002124
    #连接超时时间 单位ms(毫秒)
    timeout: 3000
    lettuce:
      pool:
        #连接池最大连接数
        max-active: 8
        #连接池最大阻塞等待时间,负值表示没有限制
        max-wait: -1
        #连接池最大空闲连接
        max-idle: 8
        #连接池最小空闲连接
        min-idle: 0
  ##Quartz配置
  quartz:
    jdbc:
      # 初始化Quartz表结构,项目第一次启动配置程always,然后改成never 否则已生成的job会被初始化掉
      initialize-schema: never
    #将任务持久化到数据库
    job-store-type: jdbc
    #程序结束时会等待quartz相关的内容结果
    wait-for-jobs-to-complete-on-shutdown: true
    # QuartzScheduler启动时更新己存在的Job,这样就不用每次修改targetObject后删除qrtz_job_details表对应记录
    overwrite-existing-jobs: true
    #参数配置
    properties:
      org:
        quartz:
          #scheduler相关
          scheduler:
            instanceName: scheduler
            instanceId: AUTO
          #持久化相关
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            #表示数据库中相关表是以QRTZ_开头的
            tablePrefix: QRTZ_
            useProperties: false
          #线程池相关
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            #线程数
            threadCount: 10
            #线程优先级
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true


##自定义
custom:
  feign:
    client:
      test:
        url: localhost:8090

